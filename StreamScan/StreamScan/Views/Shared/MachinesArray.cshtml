@model StreamScan.ViewModels.MachinesViewModel
@if (Model.Machines != null)
{
    using (var table = Html.Bootstrap().Table().RemoveCss("table").AddCss("display").AddAttributes(new { @cellspacing = 0, @width = "100%" }).SetId("machines-table").Begin())
    {
        using (var head = table.TableHeaderRow().SetId("filterrow").Begin())
        {
            if (Model.facility == 0)
            {
                @head.TableHeader("Facility")
            }
            @head.TableHeader("Hostname")
            @head.TableHeader("IP Address")
            @head.TableHeader("StreamX Version")
            @head.TableHeader("Hard Drive")
            @head.TableHeader("StreamX FileName")
            @head.TableHeader("StreamX First Installation Date")
            @head.TableHeader("StreamX Last Installation Date")
            @head.TableHeader("StreamX Components")
            @head.TableHeader("StreamX Logs Folders")
            @head.TableHeader("Manufacturer Name")
            @head.TableHeader("Product Model")
            @head.TableHeader("Product Type")
            @head.TableHeader("Operating System")
            @head.TableHeader("CPU Architecture")
            @head.TableHeader("Edition")
            @head.TableHeader("Platform ID")
            @head.TableHeader("Service Pack")
            @head.TableHeader("OS Version")
            @head.TableHeader("Network Card Name")
            @head.TableHeader("Domain Name")
            @head.TableHeader("Gateway")
            @head.TableHeader("Subnet Mask")
        }
        using (var head = table.TableHeaderRow().Begin())
        {
            if (Model.facility == 0)
            {
                @head.TableHeader("Facility")
            }
            @head.TableHeader("Hostname")
            @head.TableHeader("IP Address")
            @head.TableHeader("StreamX Version")
            @head.TableHeader("Hard Drive")
            @head.TableHeader("StreamX FileName")
            @head.TableHeader("StreamX First Installation Date")
            @head.TableHeader("StreamX Last Installation Date")
            @head.TableHeader("StreamX Components")
            @head.TableHeader("StreamX Logs Folders")
            @head.TableHeader("Manufacturer Name")
            @head.TableHeader("Product Model")
            @head.TableHeader("Product Type")
            @head.TableHeader("Operating System")
            @head.TableHeader("CPU Architecture")
            @head.TableHeader("Edition")
            @head.TableHeader("Platform ID")
            @head.TableHeader("Service Pack")
            @head.TableHeader("OS Version")
            @head.TableHeader("Network Card Name")
            @head.TableHeader("Domain Name")
            @head.TableHeader("Gateway")
            @head.TableHeader("Subnet Mask")
        }
        foreach (int key in Model.Machines.Keys)
        {
            List<StreamScan.Models.Machine> machines = Model.Machines[key];
            foreach (StreamScan.Models.Machine machine in machines)
            {
                var drive0 = (machine.Properties.InfosMachine.CustomDrives != null) ? machine.Properties.InfosMachine.CustomDrives[0] : null;
                using (var row = table.TableDataRow().Begin())
                {
                    if (Model.facility == 0)
                    {
                        @row.TableData((Model.CmxFacilities.ToDictionary(m => m.Value))["" + key].Text)
                    }
                    @row.TableData(machine.Properties.InfosReseau.HostName)
                    @row.TableData(machine.Properties.InfosReseau.IpAddress)
                    @row.TableData(machine.Properties.InfosStreamX.Version)
                    @row.TableData((drive0 != null) ? $"{drive0.Name}({drive0.TotalSize - drive0.TotalFreeSpace}GB/{drive0.TotalSize}GB)" : "")
                    @row.TableData(machine.Properties.InfosStreamX.Filename)
                    @row.TableData(machine.Properties.InfosStreamX.FirstInstallation)
                    @row.TableData(machine.Properties.InfosStreamX.LastInstallation)
                    @row.TableData("")
                    @row.TableData("")
                    @row.TableData(machine.Properties.InfosMachine.ManufacturerName)
                    @row.TableData(machine.Properties.InfosMachine.ProductName)
                    @row.TableData(machine.Properties.InfosMachine.ProductType)
                    @row.TableData(machine.Properties.InfosMachine.ProductNameOs)
                    @row.TableData(machine.Properties.InfosMachine.CpuArchitecture)
                    @row.TableData(machine.Properties.InfosMachine.Edition)
                    @row.TableData(machine.Properties.InfosMachine.PlatformID)
                    @row.TableData(machine.Properties.InfosMachine.ServicePack)
                    @row.TableData(machine.Properties.InfosMachine.Version)
                    @row.TableData(machine.Properties.InfosReseau.CardName)
                    @row.TableData(machine.Properties.InfosReseau.DomainName)
                    @row.TableData(machine.Properties.InfosReseau.Gateway)
                    @row.TableData(machine.Properties.InfosReseau.SubnetMask)
                }
            }
        }
    }
    <script>
        $(document).ready(function () {
            //Ajoute les inputs au header des filtres
            $('#machines-table thead tr#filterrow th').each(function () {
                var title = $('#machines-table thead th').eq($(this).index()).text();
                $(this).html('<input type="text" placeholder="Search ' + title + '" />');
            });

            // Initialise la DataTable avec un scroll horizontal
            var table = $('#machines-table').DataTable({
                "scrollX": true
            });
            $('.dataTables_scrollBody').css('min-height', '250px');
            // Applique le filtre (recherche)
            $(".dataTable thead input").on('keyup', function () {
                table
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();
            });
        });
    </script>
}
